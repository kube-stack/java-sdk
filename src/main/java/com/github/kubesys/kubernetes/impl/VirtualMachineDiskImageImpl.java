/**
 * Copyright (2019, ) Institute of Software, Chinese Academy of Sciences
 */
package com.github.kubesys.kubernetes.impl;

import java.util.regex.Pattern;

import com.github.kubesys.kubernetes.api.specs.VirtualMachineDiskImageSpec;
import com.github.kubesys.kubernetes.api.specs.items.VirtualMachineDiskImage;
import com.github.kubesys.kubernetes.api.specs.items.VirtualMachineDiskImageList;
import com.github.kubesys.kubernetes.api.specs.items.virtualmachinediskimage.Lifecycle;
import com.github.kubesys.kubernetes.api.specs.items.virtualmachinediskimage.Lifecycle.CreateDiskImage;
import com.github.kubesys.kubernetes.api.specs.items.virtualmachinediskimage.Lifecycle.CreateDiskImageFromDisk;
import com.github.kubesys.kubernetes.api.specs.items.virtualmachinediskimage.Lifecycle.DeleteDiskImage;
import com.github.kubesys.kubernetes.utils.RegExpUtils;

/**
 * @author  wuheng@otcaix.iscas.ac.cn
 * 
 * @version 1.0.0
 * @since   2019/9/1
 **/
public class VirtualMachineDiskImageImpl extends AbstractImpl<VirtualMachineDiskImage, VirtualMachineDiskImageList, VirtualMachineDiskImageSpec> {


	@Override
	public Object getLifecycle() {
		return new Lifecycle();
	}

	@Override
	public VirtualMachineDiskImage getModel() {
		return new VirtualMachineDiskImage();
	}

	@Override
	public VirtualMachineDiskImageSpec getSpec() {
		return new VirtualMachineDiskImageSpec();
	}

	@Override
	public VirtualMachineDiskImageSpec getSpec(VirtualMachineDiskImage r) {
		return r.getSpec();
	}


	/*************************************************
	 * 
	 * Generated by <code>MethodGenerator<code>
	 * 
	 **************************************************/

	public boolean createDiskImageFromDisk(String name, CreateDiskImageFromDisk createDiskImageFromDisk) throws Exception {
		return createDiskImageFromDisk(name, null, createDiskImageFromDisk, null);
	}

	public boolean createDiskImageFromDisk(String name, String nodeName, CreateDiskImageFromDisk createDiskImageFromDisk) throws Exception {
		return createDiskImageFromDisk(name, nodeName, createDiskImageFromDisk, null);
	}

	public boolean createDiskImageFromDisk(String name, CreateDiskImageFromDisk createDiskImageFromDisk, String eventId) throws Exception {
		return createDiskImageFromDisk(name, null, createDiskImageFromDisk, eventId);
	}

	public boolean createDiskImageFromDisk(String name, String nodeName,CreateDiskImageFromDisk createDiskImageFromDisk, String eventId) throws Exception {
		Pattern pattern = Pattern.compile(RegExpUtils.NAME_PATTERN);
		if (!pattern.matcher(name).matches()) {
			throw new IllegalArgumentException("the length must be between 4 and 100, and it can only includes a-z, 0-9 and -.");
		}
		return create(getModel(), createMetadata(name, nodeName, eventId), 
				createSpec(nodeName, createLifecycle(createDiskImageFromDisk)));
	}

	public boolean createDiskImage(String name, CreateDiskImage createDiskImage) throws Exception {
		return createDiskImage(name, null, createDiskImage, null);
	}

	public boolean createDiskImage(String name, String nodeName, CreateDiskImage createDiskImage) throws Exception {
		return createDiskImage(name, nodeName, createDiskImage, null);
	}

	public boolean createDiskImage(String name, CreateDiskImage createDiskImage, String eventId) throws Exception {
		return createDiskImage(name, null, createDiskImage, eventId);
	}

	public boolean createDiskImage(String name, String nodeName,CreateDiskImage createDiskImage, String eventId) throws Exception {
		Pattern pattern = Pattern.compile(RegExpUtils.NAME_PATTERN);
		if (!pattern.matcher(name).matches()) {
			throw new IllegalArgumentException("the length must be between 4 and 100, and it can only includes a-z, 0-9 and -.");
		}
		return create(getModel(), createMetadata(name, nodeName, eventId), 
				createSpec(nodeName, createLifecycle(createDiskImage)));
	}

	public boolean deleteDiskImage(String name, DeleteDiskImage deleteDiskImage) throws Exception {
		return deleteDiskImage(name, deleteDiskImage, null);
	}

	public boolean deleteDiskImage(String name, DeleteDiskImage deleteDiskImage, String eventId) throws Exception {
		Pattern pattern = Pattern.compile(RegExpUtils.NAME_PATTERN);
		if (!pattern.matcher(name).matches()) {
			throw new IllegalArgumentException("the length must be between 4 and 100, and it can only includes a-z, 0-9 and -.");
		}
		return delete(name, updateMetadata(name, eventId), deleteDiskImage);
	}

	public boolean deleteDiskImage(String name, String nodeName, DeleteDiskImage deleteDiskImage) throws Exception {
		updateHost(name, nodeName);
		return deleteDiskImage(name, deleteDiskImage, null);
	}

	public boolean deleteDiskImage(String name, String nodeName, DeleteDiskImage deleteDiskImage, String eventId) throws Exception {
		updateHost(name, nodeName);
		return deleteDiskImage(name, deleteDiskImage, eventId);
	}
}
