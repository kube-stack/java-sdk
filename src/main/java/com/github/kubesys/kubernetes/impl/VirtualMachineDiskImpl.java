/**
 * Copyright (2019, ) Institute of Software, Chinese Academy of Sciences
 */
package com.github.kubesys.kubernetes.impl;

import java.util.regex.Pattern;

import com.github.kubesys.kubernetes.api.model.VirtualMachineDisk;
import com.github.kubesys.kubernetes.api.model.VirtualMachineDiskList;
import com.github.kubesys.kubernetes.api.model.VirtualMachineDiskSpec;
import com.github.kubesys.kubernetes.api.model.virtualmachinedisk.Lifecycle;
import com.github.kubesys.kubernetes.api.model.virtualmachinedisk.Lifecycle.CloneDisk;
import com.github.kubesys.kubernetes.api.model.virtualmachinedisk.Lifecycle.ConvertDiskToDiskImage;
import com.github.kubesys.kubernetes.api.model.virtualmachinedisk.Lifecycle.CreateDisk;
import com.github.kubesys.kubernetes.api.model.virtualmachinedisk.Lifecycle.CreateDiskFromDiskImage;
import com.github.kubesys.kubernetes.api.model.virtualmachinedisk.Lifecycle.CreateDiskSnapshot;
import com.github.kubesys.kubernetes.api.model.virtualmachinedisk.Lifecycle.DeleteDisk;
import com.github.kubesys.kubernetes.api.model.virtualmachinedisk.Lifecycle.DeleteDiskSnapshot;
import com.github.kubesys.kubernetes.api.model.virtualmachinedisk.Lifecycle.ResizeDisk;
import com.github.kubesys.kubernetes.api.model.virtualmachinedisk.Lifecycle.RevertDiskSnapshot;
import com.github.kubesys.kubernetes.utils.RegExpUtils;

/**
 * @author  wuheng@otcaix.iscas.ac.cn
 * 
 * @version 1.0.0
 * @since   2019/9/1
 **/
public class VirtualMachineDiskImpl extends AbstractImpl<VirtualMachineDisk, VirtualMachineDiskList, VirtualMachineDiskSpec> {

	@Override
	public VirtualMachineDisk getModel() {
		return new VirtualMachineDisk();
	}

	@Override
	public VirtualMachineDiskSpec getSpec() {
		return new VirtualMachineDiskSpec();
	}
	

	@Override
	public Object getLifecycle() {
		return new Lifecycle();
	}


	@Override
	public VirtualMachineDiskSpec getSpec(VirtualMachineDisk r) {
		return r.getSpec();
	}

	/*************************************************
	 * 
	 * Generated by <code>MethodGenerator<code>
	 * 
	 **************************************************/
	
	public boolean deleteDisk(String name, DeleteDisk deleteDisk) throws Exception {
		return deleteDisk(name, deleteDisk, null);
	}

	public boolean deleteDisk(String name,DeleteDisk deleteDisk, String eventId) throws Exception {
		Pattern pattern = Pattern.compile(RegExpUtils.NAME_PATTERN);
		if (!pattern.matcher(name).matches()) {
			throw new IllegalArgumentException("the length must be between 8 and 32, and it can only includes a-z, 0-9 and -.");
		}
		return delete(name, updateMetadata(name, eventId), deleteDisk);
	}

	public boolean resizeDisk(String name, ResizeDisk resizeDisk) throws Exception {
		return resizeDisk(name, resizeDisk, null);
	}

	public boolean resizeDisk(String name,ResizeDisk resizeDisk, String eventId) throws Exception {
		Pattern pattern = Pattern.compile(RegExpUtils.NAME_PATTERN);
		if (!pattern.matcher(name).matches()) {
			throw new IllegalArgumentException("the length must be between 8 and 32, and it can only includes a-z, 0-9 and -.");
		}
		return update(name, updateMetadata(name, eventId), resizeDisk);
	}

	public boolean createDisk(String name, CreateDisk createDisk) throws Exception {
		return createDisk(name, null, createDisk, null);
	}

	public boolean createDisk(String name, String nodeName, CreateDisk createDisk) throws Exception {
		return createDisk(name, nodeName, createDisk, null);
	}

	public boolean createDisk(String name, CreateDisk createDisk, String eventId) throws Exception {
		return createDisk(name, null, createDisk, eventId);
	}

	public boolean createDisk(String name, String nodeName,CreateDisk createDisk, String eventId) throws Exception {
		Pattern pattern = Pattern.compile(RegExpUtils.NAME_PATTERN);
		if (!pattern.matcher(name).matches()) {
			throw new IllegalArgumentException("the length must be between 8 and 32, and it can only includes a-z, 0-9 and -.");
		}
		return create(getModel(), createMetadata(name, nodeName, eventId), 
				createSpec(nodeName, createLifecycle(createDisk)));
	}

	public boolean createDiskFromDiskImage(String name, CreateDiskFromDiskImage createDiskFromDiskImage) throws Exception {
		return createDiskFromDiskImage(name, null, createDiskFromDiskImage, null);
	}

	public boolean createDiskFromDiskImage(String name, String nodeName, CreateDiskFromDiskImage createDiskFromDiskImage) throws Exception {
		return createDiskFromDiskImage(name, nodeName, createDiskFromDiskImage, null);
	}

	public boolean createDiskFromDiskImage(String name, CreateDiskFromDiskImage createDiskFromDiskImage, String eventId) throws Exception {
		return createDiskFromDiskImage(name, null, createDiskFromDiskImage, eventId);
	}

	public boolean createDiskFromDiskImage(String name, String nodeName,CreateDiskFromDiskImage createDiskFromDiskImage, String eventId) throws Exception {
		Pattern pattern = Pattern.compile(RegExpUtils.NAME_PATTERN);
		if (!pattern.matcher(name).matches()) {
			throw new IllegalArgumentException("the length must be between 8 and 32, and it can only includes a-z, 0-9 and -.");
		}
		return create(getModel(), createMetadata(name, nodeName, eventId), 
				createSpec(nodeName, createLifecycle(createDiskFromDiskImage)));
	}

	public boolean convertDiskToDiskImage(String name, ConvertDiskToDiskImage convertDiskToDiskImage) throws Exception {
		return convertDiskToDiskImage(name, convertDiskToDiskImage, null);
	}

	public boolean convertDiskToDiskImage(String name,ConvertDiskToDiskImage convertDiskToDiskImage, String eventId) throws Exception {
		Pattern pattern = Pattern.compile(RegExpUtils.NAME_PATTERN);
		if (!pattern.matcher(name).matches()) {
			throw new IllegalArgumentException("the length must be between 8 and 32, and it can only includes a-z, 0-9 and -.");
		}
		return update(name, updateMetadata(name, eventId), convertDiskToDiskImage);
	}

	public boolean cloneDisk(String name, CloneDisk cloneDisk) throws Exception {
		return cloneDisk(name, cloneDisk, null);
	}

	public boolean cloneDisk(String name,CloneDisk cloneDisk, String eventId) throws Exception {
		Pattern pattern = Pattern.compile(RegExpUtils.NAME_PATTERN);
		if (!pattern.matcher(name).matches()) {
			throw new IllegalArgumentException("the length must be between 8 and 32, and it can only includes a-z, 0-9 and -.");
		}
		return update(name, updateMetadata(name, eventId), cloneDisk);
	}

	public boolean createDiskSnapshot(String name, CreateDiskSnapshot createDiskSnapshot) throws Exception {
		return createDiskSnapshot(name, createDiskSnapshot, null);
	}

	public boolean createDiskSnapshot(String name,CreateDiskSnapshot createDiskSnapshot, String eventId) throws Exception {
		Pattern pattern = Pattern.compile(RegExpUtils.NAME_PATTERN);
		if (!pattern.matcher(name).matches()) {
			throw new IllegalArgumentException("the length must be between 8 and 32, and it can only includes a-z, 0-9 and -.");
		}
		return update(name, updateMetadata(name, eventId), createDiskSnapshot);
	}

	public boolean revertDiskSnapshot(String name, RevertDiskSnapshot revertDiskSnapshot) throws Exception {
		return revertDiskSnapshot(name, revertDiskSnapshot, null);
	}

	public boolean revertDiskSnapshot(String name,RevertDiskSnapshot revertDiskSnapshot, String eventId) throws Exception {
		Pattern pattern = Pattern.compile(RegExpUtils.NAME_PATTERN);
		if (!pattern.matcher(name).matches()) {
			throw new IllegalArgumentException("the length must be between 8 and 32, and it can only includes a-z, 0-9 and -.");
		}
		return update(name, updateMetadata(name, eventId), revertDiskSnapshot);
	}

	public boolean deleteDiskSnapshot(String name, DeleteDiskSnapshot deleteDiskSnapshot) throws Exception {
		return deleteDiskSnapshot(name, deleteDiskSnapshot, null);
	}

	public boolean deleteDiskSnapshot(String name,DeleteDiskSnapshot deleteDiskSnapshot, String eventId) throws Exception {
		Pattern pattern = Pattern.compile(RegExpUtils.NAME_PATTERN);
		if (!pattern.matcher(name).matches()) {
			throw new IllegalArgumentException("the length must be between 8 and 32, and it can only includes a-z, 0-9 and -.");
		}
		return delete(name, updateMetadata(name, eventId), deleteDiskSnapshot);
	}

}
